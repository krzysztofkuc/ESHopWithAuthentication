@model PlusAndComment.Models.ViewModel.AddCategoryVM

@{
    ViewBag.Title = "AddCategory";
}

<h2>AddCategory</h2>


@using (Html.BeginForm("AddCategory", "Manage", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Category.ParentId, new { @id = "parentId" });

    <div class="form-horizontal">
        <h4>AddCategoryVM</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">

                @DisplayRoots(Model.AllCategories)

                @*Add here validation messageFOR*@
                @Html.ValidationMessage("error_msg")
                @Html.LabelFor(m => m.Category.Name)

                @Html.TextBoxFor(m => m.Category.Name, new { @class = "form-control", @style="displany: inline" })
                @Html.ValidationMessageFor(model => model.Category.Name)

                @Html.LabelFor(m => m.AllCategories)

                @DropDownHierarchy(Model.AllCategories)

                @*@Html.DropDownListFor(m => m.Category.ParentId, new SelectList(Model.AllCategories, "CategoryId", "Name"), "- Please Select -")*@

            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@helper DropDownHierarchy(ICollection<PlusAndComment.Models.ViewModel.CategoryVM> elements)
{
    <div class="btn-group hierarchy-select" data-resize="auto" id="example-one">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
            <span class="selected-label pull-left">&nbsp;</span>
            <span class="caret"></span>
            <span class="sr-only">Toggle Dropdown</span>
        </button>
        <div class="dropdown-menu open">
            <div class="hs-searchbox">
                <input type="text" class="form-control" autocomplete="off">
            </div>
            <ul class="dropdown-menu inner" role="menu" id="addCategoryDropDown">
                <li data-value="" data-level="1" data-default-selected="">
                    <a href="#">Please select</a>
                </li>
                @{
                    Model.iteration = 0;
                    foreach (var element in elements.Where(x => x.ParentId == null))
                    {
                        Model.iteration++;
                        <li data-value="@element.CategoryId" data-level="1" class="dropDown">
                            <a href="#">@element.Name</a>
                        </li>
                        @DisplayChildForDropdown(element, 1)
                    }
                }
            </ul>
        </div>
        <input class="hidden hidden-field" name="example_one" readonly="readonly" aria-hidden="true" type="text" />
    </div>
}

@helper DisplayChildForDropdown(PlusAndComment.Models.ViewModel.CategoryVM element, int level)
{
    level++;
    foreach (var elem in element.Categories)
    {
        Model.iteration++;
        <li data-value="@elem.CategoryId" data-level="@level">
            <a href="#">@elem.Name</a>
            @if (element.ParentId != null)
            {
                Html.Hidden(elem.ParentId.ToString());
            }
        </li>

        if (elem.Categories.Count() > 0)
        {
            @DisplayChildForDropdown(elem, level)
        }

    }
}

@helper DisplayRoots(ICollection<PlusAndComment.Models.ViewModel.CategoryVM> elements)
{
    <ul>
        @foreach (var element in elements.Where(x => x.ParentId == null))
        {
            <li>
                @element.Name
            </li>
            @DisplayChild(element)
        }
    </ul>
}

@helper DisplayChild(PlusAndComment.Models.ViewModel.CategoryVM element)
{
    <ul>
        @foreach (var elem in element.Categories)
        {
            <li>
                @elem.Name
                @{
                    if (elem.Categories.Count() > 0)
                    {
                        @DisplayChild(elem)
                    }
                }
            </li>
        }
    </ul>
}

