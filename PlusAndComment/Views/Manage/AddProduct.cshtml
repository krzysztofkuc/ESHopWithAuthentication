@model PlusAndComment.Models.ViewModel.AddProductVM

<h4>Add product</h4>

<div class="row">
    <div class="col">
        @using (Html.BeginForm())
        {
            @Html.HiddenFor(m => m.CurrentProduct.CatId, new { @id = "catIdAddProduct" })

            @Html.AntiForgeryToken()

            var listEnumerator = Model.CurrentProduct.Pictures.GetEnumerator();

            for (var i = 0; listEnumerator.MoveNext() == true; i++)
            {
                var item = listEnumerator.Current;
                @Html.HiddenFor(m => m.CurrentProduct.Pictures[i].Path, new { @id = "Path_" + i });
            }
            
            <hr />
            <div class="form-group">
                @Html.LabelFor(model => model.CurrentProduct.Name)
                @Html.EditorFor(model => model.CurrentProduct.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter product name" } })
                @Html.ValidationMessageFor(model => model.CurrentProduct.Name, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CurrentProduct.Description)
                @Html.EditorFor(model => model.CurrentProduct.Description, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter description" } })
                @Html.ValidationMessageFor(model => model.CurrentProduct.Description, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CurrentProduct.Price)
                @Html.EditorFor(model => model.CurrentProduct.Price, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter price" } })
                @Html.ValidationMessageFor(model => model.CurrentProduct.Price, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CurrentProduct.Category)
                @DropDownHierarchy(Model.AllCategories)
                @Html.ValidationMessageFor(model => model.CurrentProduct.Category, "", new { @class = "text-danger" })
            </div>
        }
    </div>
    <div class="col">
        <div class="row">

            @for (var i = 0; i < 4; i++)
            {
                <div class="col-md-6" style="text-align: center; border: 10px">
                    <label class="imageThumb_uploadLabel" for="imageThumb_upload_@i">
                        <img class="imageThumb_upload" id=@string.Format("imageThumb_upload_{0}_Preview",i) src="~/Storage/no-image-icon.png" />
                        <span class="middle">
                            <span class="textMiddle">Upload</span>
                        </span>
                        <input class="imageThumb_upload" type="file" name="image" id="imageThumb_upload_@i" />
                    </label>
                </div>
            }
        </div>
    </div>
</div>
        <div class="col-md-12">
            <div class="row">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>

                @*Attributes*@
                <div>
                    @Html.ActionLink("Add attribute", "CreateProductAttribute", "Manage", new { Model.CurrentProduct.ProductId }, new { @class = "btn btn-primary btn-small" })
                </div>
            </div>
        </div>
        <div class="row">
            <table class="table">
                <tr>
                    <th>Product Name</th>
                    <th>Product Category</th>
                    <th>Operation</th>
                </tr>

                @foreach (var product in Model.AllProducts)
                {
                    <tr>
                        <td>@Html.Label(product.Name)</td>
                        <td>@Html.Label(product.Category.Name)</td>
                        <td>
                            @Html.ActionLink("Edit", "EditProduct", new { id = product.ProductId }) |
                            @Html.ActionLink("Details", "Details", new { id = product.ProductId }) |
                            @Html.ActionLink("Delete", "DeleteProduct", new { id = product.ProductId })
                        </td>
                    </tr>
                }

            </table>
        </div>

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>

    @helper DropDownHierarchy(ICollection<PlusAndComment.Models.ViewModel.CategoryVM> elements)
        {
            <div class="dropdown hierarchy-select" id="example-one">
                <button type="button" class="btn btn-secondary dropdown-toggle" id="example-one-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
                @*check what is this attribute*@
                <div class="dropdown-menu" aria-labelledby="example-one-button">
                    <div class="hs-searchbox">
                        <input type="text" class="form-control" autocomplete="off">
                    </div>
                    <div class="hs-menu-inner">
                        <a class="dropdown-item" data-value="" data-level="1" data-default-selected="" href="#">All categories</a>
                        @{
                            Model.iteration = 0;
                            foreach (var element in elements.Where(x => x.ParentId == null))
                            {
                                Model.iteration++;
                                <a class="dropdown-item" data-value="@element.CategoryId" data-level="1" href="#">@element.Name</a>
                                @DisplayChildForDropdown(element, 1)
                            }
                        }
                    </div>
                </div>
                <input class="d-none" name="example_one" readonly="readonly" aria-hidden="true" type="text" />
            </div>
}

    @helper DisplayChildForDropdown(PlusAndComment.Models.ViewModel.CategoryVM element, int level)
        {
            level++;
            foreach (var elem in element.Categories)
            {
                Model.iteration++;
                <a class="dropdown-item" data-value="@elem.CategoryId" data-level="@level" href="#">@elem.Name</a>

                if (elem.Categories.Count() > 0)
                {
                    @DisplayChildForDropdown(elem, level)
                }

            }
}
