@model PlusAndComment.Models.ViewModel.AddProductAttributeVM

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>EditProductAttribute</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal">
            <h4>AddProductAttributeVM</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.ProductAttributeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProductAttributeId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductAttributeId, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.AttributeType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("AttributeType",
                           new SelectList(Enum.GetValues(typeof(PlusAndComment.Common.Enums.AllAttributeTypes))),
                           "Select type",
                           new { @class = "form-control", @disabled = "disabled", @onchange = "OnAttributeChanged(this.value)" })
                    @Html.ValidationMessageFor(model => model.AttributeType, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.CategoryAttributeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CategoryAttributeId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CategoryAttributeId, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.FK_CategoryAttributes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FK_CategoryAttributes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FK_CategoryAttributes, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.ProductOfAttributeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ProductOfAttributeId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductOfAttributeId, "", new { @class = "text-danger" })
                </div>
            </div>

            @switch(Model.AttributeType)
            {
                case "list":
                case "multiselectList":
                    <div class="form-group">
                        @Html.LabelFor(model => model.ComboboxValues, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @for (int i = 0; i < Model.ComboboxValues.Count; i++)
                            {       
                        
                                    @Html.TextBoxFor(x => x.ComboboxValues[i].Value, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ComboboxValues[i].Value, "", new { @class = "text-danger" })
                            }
                        </div>
                    </div>
                    break;
                case "number":
                    break;
                case "date":
                    <div class="form-group">
                        @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control", @id = "datepicker" } })
                            @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    break;
                case "text":
                    <div class="form-group">
                        @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    break;
            }

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</body>
</html>
