@model PlusAndComment.Models.ViewModel.AddProductAttributeVM

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>CreateProductAttribute</title>
</head>
<body>
    @using (Html.BeginForm("AddProductAttribute", "Manage", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        @*@Html.HiddenFor(m => m.ProductOfAttributeId)*@
        @Html.HiddenFor(m => Model.CurrentProduct.Attributes)
        @Html.HiddenFor(m => Model.CurrentProduct.Category)
        @Html.HiddenFor(m => Model.CurrentProduct.Description)
        @Html.HiddenFor(m => Model.CurrentProduct.Name)
        @Html.HiddenFor(m => Model.CurrentProduct.ProductId)

        <div class="form-horizontal">
            <h4>AddProductAttributeVM</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Name, new SelectList(Model.CurrentProduct.Category.Attributes.Select(attr => attr.Name)), new { id = "SelectAttributeDropDown" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(m => m.ProductAttributeId, new { @id = "PKAttributeId" });

        <div class="form-group">
            @*is set in js*@
            @Html.HiddenFor(model => model.AttributeType, new { @id = "attributeType" })
        </div>

        <div class="form-group">
            <label>Category Name</label>
            <div class="col-md-10">
                <label id="attributeCategory"></label>
            </div>
        </div>

        if (Model.CategoryAttributeId != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                </div>
            </div>



            <div id="tableAttributeList" style="display:none">
                <h4>Attribute list</h4>
                <table id="container">
                    <tr>
                        <th>Values</th>
                    </tr>
                    @Html.EditorFor(x => x.ComboboxValues, new { htmlAttributes = new { @class = "form-control" } })
                </table>

                <input type="button" id="btnAdd" value="Add New Item" />
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

</body>
</html>


<script>
    function OnAttributeChanged(val)
    {
        if (val == "list" || val == "multiSelectList") {
            //$("#tableAttributeList").prop("display", "block")
            //$("#listAtrributeValue").prop("display", "block")
            $("#tableAttributeList").show();
            $("#listAtrributeValue").show();
        }
        else {
            $("#tableAttributeList").hide();
            $("#listAtrributeValue").hide();
        }
    }

    $(function () {
        $("#btnAdd").click(function (e) {
            var itemIndex = $("#container input.ItemValue").length;
            e.preventDefault();

            var newItem = $("<tr><td><input id='ComboboxValues_" + itemIndex + "__Id' type='hidden' value='' class='iHidden'  name='ComboboxValues[" + itemIndex + "].Id' /><input id='ComboboxValues_" + itemIndex + "__ListId' type='hidden' value='' class='iHidden'  name='ComboboxValues[" + itemIndex + "].ListId'/><input type='text' id='ComboboxValues_" + itemIndex + "__Value' value='' name='ComboboxValues[" + itemIndex + "].Value' class='ItemValue'/></td></tr>");
            $("#container").append(newItem);
        });
    });

          $("#SelectAttributeDropDown").change(function() {

            var t = $(this).val();

            var attributes = @Html.Raw(Json.Encode(Model.CurrentProduct.Category.Attributes))

                $.each(attributes, function (index, item) {

                    if (t == item.Name) {
                        $("#attributeType").text(item.AttributeType);
                        $("#attributeCategory").text(item.CategoryAttribute.Name);
                        $("#PKAttributeId").val(item.PKAttributeId);
                        
                    }
                    // access the properties of each user
                    var id = item.Id;
                    var name = item.Name;
                });
        });
</script>